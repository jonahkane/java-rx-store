{"ast":null,"code":"import _toConsumableArray from\"C:/Users/jonah/bootcamp/gitlab-repo/EditedUofM-VIRT-FSF-PT-11-2022-U-LOLC - Copy/22-State/01-Activities/26-Stu_Actions-Reducers/Solved/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/Users/jonah/bootcamp/gitlab-repo/EditedUofM-VIRT-FSF-PT-11-2022-U-LOLC - Copy/22-State/01-Activities/26-Stu_Actions-Reducers/Solved/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useReducer}from'react';import{UPDATE_PRODUCTS,ADD_TO_CART,UPDATE_CART_QUANTITY,REMOVE_FROM_CART,ADD_MULTIPLE_TO_CART,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,CLEAR_CART,TOGGLE_CART}from'./actions';// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport var reducer=function reducer(state,action){switch(action.type){// Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});// Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n// If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\ncase UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});// First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n// If so, we remove it from our cart and set the updated state to a variable called `newState`\ncase REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});// Then we return a copy of state and check to see if the cart is empty.\n// If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\nreturn _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});case UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});// Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n// This saves us from a crash.\ndefault:return state;}};export function useProductReducer(initialState){return useReducer(reducer,initialState);}","map":{"version":3,"names":["useReducer","UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","_objectSpread","products","_toConsumableArray","cartOpen","cart","concat","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","useProductReducer","initialState"],"sources":["C:/Users/jonah/bootcamp/gitlab-repo/EditedUofM-VIRT-FSF-PT-11-2022-U-LOLC - Copy/22-State/01-Activities/26-Stu_Actions-Reducers/Solved/client/src/utils/reducers.js"],"sourcesContent":["import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n"],"mappings":"6cAAA,OAASA,UAAU,KAAQ,OAAO,CAClC,OACEC,eAAe,CACfC,WAAW,CACXC,oBAAoB,CACpBC,gBAAgB,CAChBC,oBAAoB,CACpBC,iBAAiB,CACjBC,uBAAuB,CACvBC,UAAU,CACVC,WAAW,KACN,WAAW,CAElB;AACA,MAAO,IAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,KAAK,CAAEC,MAAM,CAAK,CACxC,OAAQA,MAAM,CAACC,IAAI,EACjB;AACA,IAAK,CAAAZ,eAAe,CAClB,OAAAa,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRI,QAAQ,CAAAC,kBAAA,CAAMJ,MAAM,CAACG,QAAQ,CAAC,GAGlC,IAAK,CAAAb,WAAW,CACd,OAAAY,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRM,QAAQ,CAAE,IAAI,CACdC,IAAI,IAAAC,MAAA,CAAAH,kBAAA,CAAML,KAAK,CAACO,IAAI,GAAEN,MAAM,CAACQ,OAAO,EAAC,GAEzC,IAAK,CAAAf,oBAAoB,CACvB,OAAAS,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRO,IAAI,IAAAC,MAAA,CAAAH,kBAAA,CAAML,KAAK,CAACO,IAAI,EAAAF,kBAAA,CAAKJ,MAAM,CAACG,QAAQ,EAAC,GAE7C;AACA;AACA,IAAK,CAAAZ,oBAAoB,CACvB,OAAAW,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRM,QAAQ,CAAE,IAAI,CACdC,IAAI,CAAEP,KAAK,CAACO,IAAI,CAACG,GAAG,CAAC,SAACD,OAAO,CAAK,CAChC,GAAIR,MAAM,CAACU,GAAG,GAAKF,OAAO,CAACE,GAAG,CAAE,CAC9BF,OAAO,CAACG,gBAAgB,CAAGX,MAAM,CAACW,gBAAgB,CACpD,CACA,MAAO,CAAAH,OAAO,CAChB,CAAC,CAAC,GAGN;AACA;AACA,IAAK,CAAAhB,gBAAgB,CACnB,GAAI,CAAAoB,QAAQ,CAAGb,KAAK,CAACO,IAAI,CAACO,MAAM,CAAC,SAACL,OAAO,CAAK,CAC5C,MAAO,CAAAA,OAAO,CAACE,GAAG,GAAKV,MAAM,CAACU,GAAG,CACnC,CAAC,CAAC,CAEF;AACA;AACA,OAAAR,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRM,QAAQ,CAAEO,QAAQ,CAACE,MAAM,CAAG,CAAC,CAC7BR,IAAI,CAAEM,QAAQ,GAGlB,IAAK,CAAAhB,UAAU,CACb,OAAAM,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRM,QAAQ,CAAE,KAAK,CACfC,IAAI,CAAE,EAAE,GAGZ,IAAK,CAAAT,WAAW,CACd,OAAAK,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRM,QAAQ,CAAE,CAACN,KAAK,CAACM,QAAQ,GAG7B,IAAK,CAAAX,iBAAiB,CACpB,OAAAQ,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRgB,UAAU,CAAAX,kBAAA,CAAMJ,MAAM,CAACe,UAAU,CAAC,GAGtC,IAAK,CAAApB,uBAAuB,CAC1B,OAAAO,aAAA,CAAAA,aAAA,IACKH,KAAK,MACRiB,eAAe,CAAEhB,MAAM,CAACgB,eAAe,GAG3C;AACA;AACA,QACE,MAAO,CAAAjB,KAAK,CAChB,CACF,CAAC,CAED,MAAO,SAAS,CAAAkB,iBAAiBA,CAACC,YAAY,CAAE,CAC9C,MAAO,CAAA9B,UAAU,CAACU,OAAO,CAAEoB,YAAY,CAAC,CAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}